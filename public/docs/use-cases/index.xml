<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Supergraph Manifesto</title><link>http://localhost:1313/docs/use-cases/</link><description>Recent content on The Supergraph Manifesto</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:1313/docs/use-cases/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost:1313/docs/use-cases/api-composition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/use-cases/api-composition/</guid><description>API Composition: API Integration, Aggregation &amp;amp; Orchestration # We use the term API composition to encompass three main aspects of working with multiple API endpoints: integration, orchestration and aggregation.
A key driver for the Supergraph is the need for API composition. GraphQL (monolithic or federated) is a special case of this need.
While domain owners (producers) are owners of a domain API, in a multi-consumer &amp;amp; multi-producer scenario, API consumers often also need specialized APIs that are optimized for their use-cases.</description></item></channel></rss>