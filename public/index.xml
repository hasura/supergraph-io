<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Supergraph Manifesto</title><link>http://localhost:1313/</link><description>Recent content on The Supergraph Manifesto</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost:1313/docs/use-cases/api-composition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/use-cases/api-composition/</guid><description>API Composition: API Integration, Aggregation &amp;amp; Orchestration # We use the term API composition to encompass three main aspects of working with multiple API endpoints: integration, orchestration and aggregation.
A key driver for the Supergraph is the need for API composition. GraphQL (monolithic or federated) is a special case of this need.
While domain owners (producers) are owners of a domain API, in a multi-consumer &amp;amp; multi-producer scenario, API consumers often also need specialized APIs that are optimized for their use-cases.</description></item><item><title>FAQ</title><link>http://localhost:1313/docs/references/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/references/faq/</guid><description> FAQ # Supergraph vs alternative approaches # Connect domains Consume APIs Discover demand Technology Connector CI/CD Performance API Composability API portal Analytics Ecosystem integrations API gateway High N/A (no API aggregation features) Low Medium Medium Low IPaaS Low Low Medium Medium Medium Low Data virtualization Low Low - medium (usually designed for analytical workloads) High (usually only for non-API sources) Low (not API driven, usually SQL) N/A (no API analytics) Medium Supergraph Medium to High - depends on stack Medium to High - depends on stack Medium to High - depends on stack High High Depends on stack</description></item><item><title>When should you supergraph?</title><link>http://localhost:1313/docs/articles/supergraph-in-disguise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/articles/supergraph-in-disguise/</guid><description>When should you supergraph? # The root problem
Consuming data from multiple places requires integration or aggregation work This increases the burden on the producer since it takes time to build and is fragile The problem is combinatorially complex when there are multiple producers and multiple consumers Common symptoms # API consumers are frustrated by the lack of APIs that are optimized for their specific data retrieval use cases API producers are not willing to take on the burden of maintaining and operationalizing API aggregation and composition problems There is no operating model or ownership model for who should solve the integration problem Supergraph in disguise # If you&amp;rsquo;re working on any of the following projects or strategic initiatives, then you&amp;rsquo;re likely already building a supergraph.</description></item></channel></rss>